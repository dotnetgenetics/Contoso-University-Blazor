@page "/courses"
@using ContosoUniversityBlazor.Models
@using ContosoUniversityBlazor.Data

@rendermode InteractiveServer

<PageTitle>@Title</PageTitle>

<div class="container">
    <div class="row heading">
        <h3>Contoso University Courses</h3>
    </div>
    <div class="row">
        <div class="col-md-2 addCourse">
            <a href="/courseadd" class="btn btn-primary btn-sm mb-1">
                New Course
            </a>
        </div>
        <div class="col-md-10" />
    </div>
    <div class="row">
        <table class="table table-bordered table-striped">
            <thead class="table-primary">
                <tr>
                    <th>Course ID</th>
                    <th>Title</th>
                    <th>Credits</th>
                    <th>Departments</th>
                    <th></th>
                    <th></th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var course in Courses)
                {
                    <tr>
                        <td>@course.CourseID</td>
                        <td>@course.Title</td>
                        <td>@course.Credits</td>
                        <td>@course.Department.Name</td>
                        <td>
                            <a href="@($"courseupdate/{course.CourseID}")" class="btn btn-info btn-sm mb-1">
                                Edit
                            </a>
                        </td>
                        <td>
                            <a href="@($"coursedetail/{course.CourseID}")" class="btn btn-primary btn-sm mb-1">
                                Details
                            </a>
                        </td>
                        <td>
                            <button class="btn btn-danger btn-sm mb-1" @onclick="() => DeleteCourse(course.CourseID)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {

    [Inject]
    public IJSRuntime JSRuntime { get; set; }

    [Inject]
    IDbContextFactory<SchoolContext> contextFactory { get; set; }

    private string Title = "Contoso University - Courses";

    public List<Course> Courses { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Courses = new List<Course>();
        var context = contextFactory.CreateDbContext();
        Courses = await context.Courses.Include(c => c.Department).AsNoTracking().ToListAsync();
    }

    protected async Task DeleteCourse(int courseID)
    {
        bool confirmDelete = await JSRuntime.InvokeAsync<bool>("confirm", "Delete course?");
        if (confirmDelete)
        {
            var context = contextFactory.CreateDbContext();
            var course = await context.Courses.FindAsync(courseID);

            if (course != null)
            {
                context.Courses.Remove(course);
                await context.SaveChangesAsync();
            }

            Courses = new List<Course>();
            Courses = await context.Courses.Include(c => c.Department).AsNoTracking().ToListAsync();
        }
    }
}
